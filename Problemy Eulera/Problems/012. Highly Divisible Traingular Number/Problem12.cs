using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace Problemy_Eulera
{
    //The sequence of triangle numbers is generated by adding the natural numbers.So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    //1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    //Let us list the factors of the first seven triangle numbers:

    // 1: 1
    // 3: 1,3
    // 6: 1,2,3,6
    //10: 1,2,5,10
    //15: 1,3,5,15
    //21: 1,3,7,21
    //28: 1,2,4,7,14,28
    //We can see that 28 is the first triangle number to have over five divisors.
    //What is the value of the first triangle number to have over five hundred divisors?
    class Problem12 : IProblem
    {
        private const int minDivisors = 500;

        public void PrintSolution()
        {
            Console.WriteLine($"Value of the first triangle number to have over {minDivisors} divisors: {Solution()}");
        }

        private int Solution()
        {
            int triangleNumberIndex = 0;
            int triangleNumber = 0;
            int numberOfDivisors = 0;
            while(numberOfDivisors <= minDivisors)
            {
                triangleNumberIndex++;
                triangleNumber = GenerateTriangleNumber(triangleNumberIndex);
                numberOfDivisors = CountNumberOfDivisors(triangleNumber);
            }
            return triangleNumber;
        }

        private int GenerateTriangleNumber(int index)
        {
            return Enumerable.Range(1, index).Sum();
        }

        private int CountNumberOfDivisors(int n)
        {
            int counter = 0;
            double end = Math.Sqrt((int)n);

            for (int i = 1; i <= end; i++)
            {
                if (n.DividesBy(i) && n / i == i)
                    counter ++;
                else if (n.DividesBy(i))
                    counter+=2;
            }
            return counter;
        }
    }
}
